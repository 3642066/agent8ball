require 'utils'
PROJECT_ROOT = File.expand_path('..','..')

def get_files
  files = ['index.html','favicon.ico','javascripts/compressed.js','stylesheets/styles.css']
  files += Dir.glob(File.join('images','*'))
  files += Dir.glob(File.join('sounds','*'))
  files += Dir.glob(File.join('stylesheets','*'))
  files = files.select{ |f| File.file?(f)}
  files
end

namespace :deploy do
  desc "Create a detached branch for deployment (requires NAME=<new branch name>, e.g., NAME=deploy/production)"
  task :create_deploy_branch do
    branch = ENV['NAME']
    fail "NAME= argument is required" unless branch
    work_dir = "/tmp/deploy#{Time.now.strftime('%Y%m%d-%H%M%S')}"
    puts work_dir
    sh "git clone --shared --no-checkout ../../ '#{work_dir}'"
    chdir work_dir
    puts Dir.pwd
    sh "git symbolic-ref HEAD refs/heads/#{branch}"
    sh "touch .gitignore; git add .gitignore; git commit -m 'Created branch #{branch}'"
    sh "git push origin #{branch}"
  end

  desc "the default thing"
  task :package do
    Dir.chdir(PROJECT_ROOT)
    puts get_files
  end

  desc "Copy $FROM dev branch (default master) to $TO server branch (default staging)"
  task :copy_to_server => :ensure_clean_tree do
    from = ENV['FROM'] || "master"
    to = ENV['TO'] || "deploy"
    puts "Copying #{from} to #{to}"

    rev = `git rev-parse HEAD`[0..7]
    work_dir = "/tmp/deploy#{Time.now.strftime('%Y%m%d-%H%M%S')}"
    sh "git clone --shared --branch #{to} . '#{work_dir}'"

    get_files.each do |file|
      source = File.join(PROJECT_ROOT, file)
      target = File.join(work_dir, file)
      dirname = File.dirname(target)
      if(!File.exists?(dirname))
        sh "mkdir -p #{dirname}"
      end
      sh "cp '#{source}' '#{target}'"
    end

    # root files
    ['.gems','config.ru'].each do |file|
      source = File.join(PROJECT_ROOT, '_tools', 'heroku', 'root', file)
      target = File.join(work_dir, file)
      sh "cp '#{source}' '#{target}'"
    end

    Dir.chdir work_dir

    CDN.process(work_dir, ['sounds'], 'http://sounds.agent8ball.com/')
    CDN.process(work_dir, ['images'], 'http://static.agent8ball.com/')
    sh "git add ."

    sh "git commit -m 'copy_to_server from #{from} rev #{rev}'"
    sh "git push origin #{to}"
  end

  task :ensure_clean_tree do
    chdir "#{PROJECT_ROOT}"
    if !ENV['DIRTY']
      fail "Project directory not clean -- check git status or use DIRTY=1" if `git status` !~ /working directory clean/
    end
  end
end